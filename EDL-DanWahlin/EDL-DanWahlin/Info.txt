Naming Convention:
  Delegates: Suffix with 'Handler' (WorkPerformedHandler)
    Events: Suffix with 2nd form (WorkPerformed, WorkCompleted)
      Function: Prefix 'On' and Suffix Event (OnWorkPerformed)

Delegate: public delegate int WorkPerformedhandler(int hours, WorkType workType);
  Event: public event WorkPerformedhandler WorkPerformed;
    Function: protected virtual void OnWorkPerformed(int hours, WorkTYpe workType){...}

public delegate void EventHandler<TEventArgs>(object sender, TEventArgs e);
  public event EventHandler<WorkPerformedEventAgrs> WorkPerformed;
  
public event EventHandler<WorkPerformedEventAgrs> WorkPerformed;
  public delegate int WorkPerformedhandler(Object sender, WorkPerformedEventAgrs e);

+= Operator:
  Its used to attach an event to an event handler

Delegate Inference:
  While attaching event to an event handler compiler can figureout which delegate object need to be created from events signature.
  So we can directly attach event to an event handler (worker.WorkPerformed += Worker_WorkPerformed;)

Lambdas, Action<T> and Func<T, TResult>:
  